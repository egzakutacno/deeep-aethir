{"version":3,"sources":["../src/hooks.ts"],"sourcesContent":["import type { HookContext } from '@deeep-network/riptide'\nimport { spawn, ChildProcess } from 'child_process'\nimport { MissingSecretError } from '@deeep-network/riptide'\n\nlet aethirProcess: ChildProcess | null = null\nlet walletKeys: { privateKey?: string; publicKey?: string } = {}\n\nmodule.exports = {\n  installSecrets: async ({ env, logger }: HookContext) => {\n    logger.info('Checking Aethir checker configuration')\n    \n    // No specific secrets required for Aethir checker\n    // Wallet will be created during startup\n    return { success: true }\n  },\n\n  start: async ({ env, logger }: HookContext) => {\n    logger.info('Starting Aethir checker setup and service')\n    \n    try {\n      // Step 1: Accept terms of service and create wallet\n      await setupAethirWallet(logger)\n      \n      // Step 2: Start the Aethir checker service\n      await startAethirService(logger)\n      \n      logger.info('Aethir checker started successfully')\n    } catch (error) {\n      logger.error(`Failed to start Aethir checker: ${error}`)\n      throw error\n    }\n  },\n\n  health: async ({ logger, utils }: HookContext) => {\n    logger.debug('Checking Aethir checker health')\n    \n    if (!aethirProcess || !aethirProcess.pid) {\n      return false\n    }\n\n    try {\n      process.kill(aethirProcess.pid, 0)\n      return true\n    } catch {\n      return false\n    }\n  },\n\n  heartbeat: async ({ logger }: HookContext) => {\n    logger.debug('Reporting Aethir checker status')\n    \n    return {\n      status: 'running',\n      walletKeys: walletKeys,\n      processId: aethirProcess?.pid || null\n    }\n  },\n\n  stop: async ({ logger, utils }: HookContext) => {\n    logger.info('Stopping Aethir checker process')\n    \n    if (aethirProcess && aethirProcess.pid) {\n      try {\n        process.kill(aethirProcess.pid, 'SIGTERM')\n        await utils.sleep(2000)\n        \n        try {\n          process.kill(aethirProcess.pid, 0)\n          process.kill(aethirProcess.pid, 'SIGKILL')\n          logger.warn('Had to force kill Aethir process')\n        } catch {\n          logger.info('Aethir process stopped gracefully')\n        }\n      } catch (error) {\n        logger.debug('Aethir process already stopped')\n      }\n    }\n    \n    aethirProcess = null\n  }\n}\n\nasync function setupAethirWallet(logger: any): Promise<void> {\n  return new Promise((resolve, reject) => {\n    logger.info('Setting up Aethir wallet...')\n    \n    const setupProcess = spawn('bash', ['-c', `\n      cd /opt/aethir-checker && \n      echo \"y\" | ./AethirCheckerCLI\n    `], {\n      stdio: ['pipe', 'pipe', 'pipe']\n    })\n\n    let output = ''\n    \n    setupProcess.stdout?.on('data', (data) => {\n      output += data.toString()\n      logger.info(`[AETHIR SETUP] ${data.toString().trim()}`)\n    })\n\n    setupProcess.stderr?.on('data', (data) => {\n      logger.error(`[AETHIR SETUP ERROR] ${data.toString().trim()}`)\n    })\n\n    setupProcess.on('close', (code) => {\n      if (code === 0) {\n        // Extract wallet keys from output\n        const privateKeyMatch = output.match(/Current private key:\\s*([^\\n]+)/)\n        const publicKeyMatch = output.match(/Current public key:\\s*([^\\n]+)/)\n        \n        if (privateKeyMatch && publicKeyMatch) {\n          walletKeys.privateKey = privateKeyMatch[1].trim()\n          walletKeys.publicKey = publicKeyMatch[1].trim()\n          logger.info('Wallet keys extracted successfully')\n          resolve()\n        } else {\n          logger.error('Failed to extract wallet keys from output')\n          reject(new Error('Wallet key extraction failed'))\n        }\n      } else {\n        logger.error(`Aethir setup failed with code ${code}`)\n        reject(new Error(`Setup process exited with code ${code}`))\n      }\n    })\n\n    setupProcess.on('error', (error) => {\n      logger.error(`Failed to start Aethir setup: ${error.message}`)\n      reject(error)\n    })\n  })\n}\n\nasync function startAethirService(logger: any): Promise<void> {\n  return new Promise((resolve, reject) => {\n    logger.info('Starting Aethir checker service...')\n    \n    aethirProcess = spawn('/opt/aethir-checker/AethirCheckerCLI', [], {\n      cwd: '/opt/aethir-checker',\n      detached: true,\n      stdio: ['ignore', 'pipe', 'pipe']\n    })\n\n    aethirProcess.on('spawn', () => {\n      logger.info(`Aethir service started with PID: ${aethirProcess?.pid}`)\n      resolve()\n    })\n\n    aethirProcess.on('error', (error) => {\n      logger.error(`Failed to start Aethir service: ${error.message}`)\n      reject(error)\n    })\n\n    aethirProcess.stdout?.on('data', (data) => {\n      logger.info(`[AETHIR] ${data.toString().trim()}`)\n    })\n\n    aethirProcess.stderr?.on('data', (data) => {\n      logger.error(`[AETHIR ERROR] ${data.toString().trim()}`)\n    })\n\n    aethirProcess.unref()\n  })\n}\n"],"mappings":"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","names":[]}